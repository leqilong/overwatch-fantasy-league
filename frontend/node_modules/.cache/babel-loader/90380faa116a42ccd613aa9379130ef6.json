{"ast":null,"code":"import _objectSpread from \"/Users/leqilong/Desktop/projects/overwatch-fantasy-league/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport predictions from '../apis/predictions';\nimport history from '../history';\nexport const fetchMatches = () => async (dispatch, getState) => {\n  const response = await predictions.get('/');\n  dispatch({\n    type: 'FETCH_MATCHES',\n    payload: response.data\n  });\n};\nexport const fetchMatch = id => async dispatch => {\n  const response = await predictions.get(\"/matches/\".concat(id));\n  dispatch({\n    type: 'FETCH_STREAM',\n    payload: response.data\n  });\n};\nexport const createPrediction = ({\n  formValues,\n  match_id\n}) => async dispatch => {\n  //hard code user id for now until authentication is implemented\n  const userId = 1;\n  const response = await predictions.post('/predictions', _objectSpread({}, formValues, {\n    match_id,\n    userId\n  }));\n  dispatch({\n    type: 'CREATE_PREDICTION',\n    payload: response.data\n  });\n  history.push('/');\n};\nexport const fetchPredictions = () => async dispatch => {\n  const response = await predictions.get('/predictions');\n  dispatch({\n    type: 'FETCH_PREDICTIONS',\n    payload: response.data\n  });\n};","map":{"version":3,"sources":["/Users/leqilong/Desktop/projects/overwatch-fantasy-league/frontend/src/actions/index.js"],"names":["predictions","history","fetchMatches","dispatch","getState","response","get","type","payload","data","fetchMatch","id","createPrediction","formValues","match_id","userId","post","push","fetchPredictions"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC9D,QAAMC,QAAQ,GAAG,MAAML,WAAW,CAACM,GAAZ,CAAgB,GAAhB,CAAvB;AACAH,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAA1C,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI,MAAMR,QAAN,IAAkB;AAChD,QAAME,QAAQ,GAAG,MAAML,WAAW,CAACM,GAAZ,oBAA4BK,EAA5B,EAAvB;AACAR,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMG,gBAAgB,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAA4B,MAAMX,QAAN,IAAkB;AAC5E;AACA,QAAMY,MAAM,GAAG,CAAf;AACA,QAAMV,QAAQ,GAAG,MAAML,WAAW,CAACgB,IAAZ,CAAiB,cAAjB,oBAAqCH,UAArC;AAAiDC,IAAAA,QAAjD;AAA2DC,IAAAA;AAA3D,KAAvB;AACAZ,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,mBAAP;AAA4BC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAA9C,GAAD,CAAR;AACAR,EAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD,CANM;AAQP,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAMf,QAAN,IAAkB;AACtD,QAAME,QAAQ,GAAG,MAAML,WAAW,CAACM,GAAZ,CAAgB,cAAhB,CAAvB;AACAH,EAAAA,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAE,mBAAP;AAA4BC,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAA9C,GAAD,CAAR;AACD,CAHM","sourcesContent":["import predictions from '../apis/predictions';\nimport history from '../history';\n\nexport const fetchMatches = () => async (dispatch, getState) => {\n  const response = await predictions.get('/');\n  dispatch({type: 'FETCH_MATCHES', payload: response.data});\n};\n\nexport const fetchMatch = id => async dispatch => {\n  const response = await predictions.get(`/matches/${id}`);\n  dispatch({type: 'FETCH_STREAM', payload: response.data});\n};\n\nexport const createPrediction = ({formValues, match_id}) => async dispatch => {\n  //hard code user id for now until authentication is implemented\n  const userId = 1;\n  const response = await predictions.post('/predictions', {...formValues, match_id, userId});\n  dispatch({type: 'CREATE_PREDICTION', payload: response.data});\n  history.push('/');\n};\n\nexport const fetchPredictions = () => async dispatch => {\n  const response = await predictions.get('/predictions');\n  dispatch({type: 'FETCH_PREDICTIONS', payload: response.data});\n};\n"]},"metadata":{},"sourceType":"module"}